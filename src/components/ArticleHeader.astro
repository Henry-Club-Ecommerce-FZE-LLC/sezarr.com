---
import { getCollection } from 'astro:content';

interface Props {
  authorSlug: string;
  pubDate?: Date;
  updatedDate?: Date;
  reviewerSlug?: string;
  reviewedDate?: Date;
  className?: string;
  showAvatar?: boolean;
}

const { 
  authorSlug, 
  pubDate, 
  updatedDate, 
  reviewerSlug, 
  reviewedDate, 
  className = '', 
  showAvatar = true 
} = Astro.props;

const authors = await getCollection('authors');
const author = authors.find(a => a.slug === authorSlug);
const reviewer = reviewerSlug ? authors.find(a => a.slug === reviewerSlug) : null;

function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function getRelativeTime(date: Date): string {
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays === 1) return 'yesterday';
  if (diffDays < 7) return `${diffDays} days ago`;
  if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;
  if (diffDays < 365) return `${Math.ceil(diffDays / 30)} months ago`;
  return `${Math.ceil(diffDays / 365)} years ago`;
}
---

<div class={`space-y-4 ${className}`}>
  <!-- Author Information -->
  {author && (
    <div class="flex items-center gap-3">
      {showAvatar && author.data.avatar && (
        <img 
          src={author.data.avatar} 
          alt={author.data.name}
          class="w-12 h-12 rounded-full object-cover border-2 border-gray-200 dark:border-gray-700"
          loading="lazy"
        />
      )}
      <div class="flex-1">
        <div class="flex items-center gap-2">
          <span class="text-sm text-gray-600 dark:text-gray-400">Written by</span>
          <a 
            href={`/authors/${author.slug}/`}
            class="font-semibold text-gray-900 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
          >
            {author.data.name}
          </a>
          {author.data.credentials && author.data.credentials.length > 0 && (
            <span class="text-xs text-blue-600 dark:text-blue-400 font-medium">
              {author.data.credentials.join(', ')}
            </span>
          )}
        </div>
        {author.data.title && (
          <p class="text-sm text-gray-600 dark:text-gray-400 mt-0.5">
            {author.data.title}
          </p>
        )}
      </div>
    </div>
  )}

  <!-- Publication Dates -->
  <div class="flex items-center gap-6 text-sm text-gray-600 dark:text-gray-400">
    {pubDate && (
      <div class="flex items-center gap-1.5">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
        </svg>
        <time datetime={pubDate.toISOString()} title={`Published on ${formatDate(pubDate)}`}>
          Published {getRelativeTime(pubDate)}
        </time>
      </div>
    )}

    {updatedDate && (
      <div class="flex items-center gap-1.5">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        <time datetime={updatedDate.toISOString()} title={`Last updated on ${formatDate(updatedDate)}`}>
          Updated {getRelativeTime(updatedDate)}
        </time>
      </div>
    )}
  </div>

  <!-- Reviewer Information -->
  {reviewer && (
    <div class="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 pt-2 border-t border-gray-200 dark:border-gray-700">
      <svg class="w-4 h-4 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
      <span>Reviewed by</span>
      <a 
        href={`/authors/${reviewer.slug}/`}
        class="font-medium text-gray-900 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
      >
        {reviewer.data.name}
      </a>
      {reviewer.data.credentials && reviewer.data.credentials.length > 0 && (
        <span class="text-xs text-green-600 dark:text-green-400 font-medium">
          ({reviewer.data.credentials.join(', ')})
        </span>
      )}
      {reviewedDate && (
        <>
          <span>on</span>
          <time datetime={reviewedDate.toISOString()} class="font-medium">
            {formatDate(reviewedDate)}
          </time>
        </>
      )}
    </div>
  )}
</div>