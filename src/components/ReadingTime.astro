---
interface Props {
  content?: string;
  minutes?: number;
  words?: number;
  className?: string;
}

const { content, minutes: providedMinutes, words: providedWords, className = '' } = Astro.props;

// Calculate reading time (average 200 words per minute)
function calculateReadingTime(text: string): { minutes: number; words: number } {
  const words = text.trim().split(/\s+/).length;
  const minutes = Math.ceil(words / 200);
  return { minutes, words };
}

// Use provided values or calculate from content or use defaults
let minutes = providedMinutes || 5; // Default to 5 minutes
let words = providedWords || 1000; // Default to 1000 words

if (content) {
  const calculated = calculateReadingTime(content);
  minutes = calculated.minutes;
  words = calculated.words;
}
---

<div class={`flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 ${className}`}>
  <!-- Reading Time -->
  <div class="flex items-center gap-1.5">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>
    <span>{minutes} min read</span>
  </div>

  <!-- Word Count -->
  <div class="flex items-center gap-1.5">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
    </svg>
    <span>{words.toLocaleString()} words</span>
  </div>

  <!-- Progress indicator (will be updated by JavaScript) -->
  <div class="flex items-center gap-1.5 reading-progress-text" style="display: none;">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 002 2v6a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
    </svg>
    <span class="progress-text">0% complete</span>
  </div>
</div>

<script>
  // Reading progress tracker
  function initReadingProgress() {
    const progressText = document.querySelector('.reading-progress-text');
    const progressSpan = document.querySelector('.progress-text');
    
    if (!progressText || !progressSpan) return;

    const article = document.querySelector('article');
    if (!article) return;

    function updateProgress() {
      const rect = article.getBoundingClientRect();
      const articleHeight = article.offsetHeight;
      const viewportHeight = window.innerHeight;
      const scrolled = Math.max(0, -rect.top);
      const visibleHeight = Math.min(articleHeight, viewportHeight - Math.max(0, rect.top));
      const progress = Math.min(100, Math.max(0, (scrolled / (articleHeight - viewportHeight)) * 100));

      if (progress > 5) { // Show progress after 5%
        progressText.style.display = 'flex';
        progressSpan.textContent = `${Math.round(progress)}% complete`;
      } else {
        progressText.style.display = 'none';
      }
    }

    window.addEventListener('scroll', updateProgress);
    window.addEventListener('resize', updateProgress);
    updateProgress(); // Initial check
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initReadingProgress);
  } else {
    initReadingProgress();
  }
</script>