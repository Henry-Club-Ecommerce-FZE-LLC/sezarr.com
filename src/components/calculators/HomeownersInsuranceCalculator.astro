---
// Homeowners Insurance Calculator Component
const constructionTypes = {
  'frame': { multiplier: 1.0, label: 'Wood Frame' },
  'masonry': { multiplier: 0.85, label: 'Brick/Masonry' },
  'steel': { multiplier: 0.9, label: 'Steel Frame' },
  'concrete': { multiplier: 0.8, label: 'Concrete Block' }
};

const roofTypes = {
  'asphalt': { multiplier: 1.0, label: 'Asphalt Shingles' },
  'metal': { multiplier: 0.9, label: 'Metal Roofing' },
  'tile': { multiplier: 0.85, label: 'Clay/Concrete Tile' },
  'slate': { multiplier: 0.8, label: 'Slate' },
  'wood': { multiplier: 1.1, label: 'Wood Shingles' }
};

const safetyFeatures = {
  'smoke_detectors': { discount: 0.02, label: 'Smoke Detectors' },
  'fire_extinguisher': { discount: 0.01, label: 'Fire Extinguisher' },
  'burglar_alarm': { discount: 0.05, label: 'Burglar Alarm' },
  'sprinkler_system': { discount: 0.15, label: 'Sprinkler System' },
  'security_system': { discount: 0.03, label: 'Security System' },
  'deadbolt_locks': { discount: 0.01, label: 'Deadbolt Locks' }
};
---

<div class="bg-white dark:bg-gray-900 rounded-xl border shadow-lg p-6">
  <div class="mb-6">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
      Homeowners Insurance Calculator
    </h2>
    <p class="text-gray-600 dark:text-gray-400">
      Calculate your home's replacement cost and recommended coverage amounts
    </p>
  </div>

  <form id="homeowners-form" class="space-y-6">
    <!-- Home Details -->
    <div class="grid md:grid-cols-2 gap-6">
      <div>
        <label for="home-size" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Home Size (Square Feet) *
        </label>
        <input 
          type="number" 
          id="home-size" 
          name="homeSize"
          min="500" 
          max="20000"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="e.g., 2000"
          required
        />
      </div>

      <div>
        <label for="construction-type" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Construction Type *
        </label>
        <select 
          id="construction-type" 
          name="constructionType"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          required
        >
          <option value="">Select construction type</option>
          {Object.entries(constructionTypes).map(([key, value]) => (
            <option value={key}>{value.label}</option>
          ))}
        </select>
      </div>

      <div>
        <label for="year-built" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Year Built *
        </label>
        <input 
          type="number" 
          id="year-built" 
          name="yearBuilt"
          min="1800" 
          max={new Date().getFullYear()}
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="e.g., 1990"
          required
        />
      </div>

      <div>
        <label for="roof-type" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Roof Type *
        </label>
        <select 
          id="roof-type" 
          name="roofType"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          required
        >
          <option value="">Select roof type</option>
          {Object.entries(roofTypes).map(([key, value]) => (
            <option value={key}>{value.label}</option>
          ))}
        </select>
      </div>

      <div>
        <label for="zip-code" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          ZIP Code *
        </label>
        <input 
          type="text" 
          id="zip-code" 
          name="zipCode"
          pattern="[0-9]{5}"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="e.g., 12345"
          required
        />
      </div>

      <div>
        <label for="home-value" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Current Market Value
        </label>
        <input 
          type="number" 
          id="home-value" 
          name="homeValue"
          min="50000"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="e.g., 350000"
        />
        <p class="text-xs text-gray-500 mt-1">Optional - helps with coverage recommendations</p>
      </div>
    </div>

    <!-- Additional Features -->
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Additional Features</h3>
      <div class="grid md:grid-cols-2 gap-4">
        <div>
          <label for="garage-size" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Garage (Car Capacity)
          </label>
          <select 
            id="garage-size" 
            name="garageSize"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="0">No Garage</option>
            <option value="1">1-Car Garage</option>
            <option value="2">2-Car Garage</option>
            <option value="3">3-Car Garage</option>
            <option value="4">4+ Car Garage</option>
          </select>
        </div>

        <div>
          <label for="basement" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Basement
          </label>
          <select 
            id="basement" 
            name="basement"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="none">No Basement</option>
            <option value="unfinished">Unfinished Basement</option>
            <option value="finished">Finished Basement</option>
          </select>
        </div>

        <div>
          <label for="stories" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Number of Stories
          </label>
          <select 
            id="stories" 
            name="stories"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="1">1 Story</option>
            <option value="1.5">1.5 Stories</option>
            <option value="2">2 Stories</option>
            <option value="2.5">2.5 Stories</option>
            <option value="3">3+ Stories</option>
          </select>
        </div>

        <div>
          <label for="fireplaces" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Number of Fireplaces
          </label>
          <select 
            id="fireplaces" 
            name="fireplaces"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="0">No Fireplaces</option>
            <option value="1">1 Fireplace</option>
            <option value="2">2 Fireplaces</option>
            <option value="3">3+ Fireplaces</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Safety Features -->
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Safety Features</h3>
      <div class="grid md:grid-cols-3 gap-3">
        {Object.entries(safetyFeatures).map(([key, feature]) => (
          <label class="flex items-center space-x-2 cursor-pointer">
            <input 
              type="checkbox" 
              name="safetyFeatures" 
              value={key}
              class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
            />
            <span class="text-sm text-gray-700 dark:text-gray-300">{feature.label}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Personal Property -->
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Personal Property</h3>
      <div class="grid md:grid-cols-2 gap-4">
        <div>
          <label for="personal-property" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Estimated Personal Property Value
          </label>
          <input 
            type="number" 
            id="personal-property" 
            name="personalProperty"
            min="10000"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="e.g., 75000"
          />
          <p class="text-xs text-gray-500 mt-1">Furniture, electronics, clothing, etc.</p>
        </div>

        <div>
          <label class="flex items-center space-x-2 mt-6">
            <input 
              type="checkbox" 
              id="high-value-items"
              name="highValueItems"
              class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
            />
            <span class="text-sm text-gray-700 dark:text-gray-300">
              I have high-value items (jewelry, art, collectibles)
            </span>
          </label>
        </div>
      </div>
    </div>

    <!-- Calculate Button -->
    <button 
      type="submit" 
      class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
    >
      Calculate Coverage Needs
    </button>
  </form>

  <!-- Results Section -->
  <div id="results" class="mt-8 hidden">
    <div class="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg p-6">
      <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-4">
        Your Coverage Recommendations
      </h3>

      <!-- Coverage Amounts -->
      <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <div class="text-center">
          <div class="text-2xl font-bold text-blue-600" id="dwelling-coverage">$0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Dwelling Coverage (A)</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-green-600" id="other-structures">$0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Other Structures (B)</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-purple-600" id="personal-property-coverage">$0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Personal Property (C)</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-orange-600" id="liability-coverage">$0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Liability (E)</div>
        </div>
      </div>

      <!-- Replacement Cost -->
      <div class="bg-white dark:bg-gray-800 rounded-lg p-4 mb-4">
        <div class="flex justify-between items-center">
          <span class="font-medium text-gray-900 dark:text-white">Estimated Replacement Cost</span>
          <span class="text-xl font-bold text-blue-600" id="replacement-cost">$0</span>
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
          Cost to rebuild your home from the ground up
        </div>
      </div>

      <!-- Annual Premium Estimate -->
      <div class="bg-white dark:bg-gray-800 rounded-lg p-4 mb-4">
        <div class="flex justify-between items-center">
          <span class="font-medium text-gray-900 dark:text-white">Estimated Annual Premium</span>
          <span class="text-xl font-bold text-green-600" id="annual-premium">$0</span>
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
          Based on national averages - actual rates vary by insurer
        </div>
      </div>

      <!-- Safety Discounts -->
      <div id="safety-discounts" class="bg-white dark:bg-gray-800 rounded-lg p-4 mb-4 hidden">
        <div class="flex justify-between items-center">
          <span class="font-medium text-gray-900 dark:text-white">Safety Feature Discounts</span>
          <span class="text-xl font-bold text-green-600" id="total-discount">0%</span>
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1" id="discount-details">
          Available discounts applied
        </div>
      </div>

      <!-- Recommendations -->
      <div class="mt-6">
        <h4 class="font-semibold text-gray-900 dark:text-white mb-3">Recommendations</h4>
        <ul id="recommendations" class="space-y-2 text-sm text-gray-600 dark:text-gray-400"></ul>
      </div>
    </div>
  </div>

  <!-- Disclaimer -->
  <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
    <p class="text-xs text-gray-600 dark:text-gray-400">
      <strong>Disclaimer:</strong> This calculator provides estimates based on national construction costs and industry averages. 
      Actual replacement costs and insurance premiums can vary significantly based on local market conditions, 
      specific materials, contractor availability, and individual insurer underwriting guidelines. 
      For accurate quotes, contact licensed insurance agents in your area.
    </p>
  </div>
</div>

<script define:vars={{ constructionTypes, roofTypes, safetyFeatures }}>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('homeowners-form');
  const results = document.getElementById('results');

  // Regional cost multipliers (simplified)
  const regionalMultipliers = {
    'CA': 1.4, 'NY': 1.3, 'FL': 1.2, 'TX': 1.0, 'CO': 1.1,
    'WA': 1.2, 'OR': 1.1, 'NV': 1.1, 'AZ': 1.0, 'UT': 0.95,
    'default': 1.0
  };

  form.addEventListener('submit', function(e) {
    e.preventDefault();
    calculateCoverage();
  });

  function calculateCoverage() {
    const formData = new FormData(form);
    const data = {};
    
    // Collect form data
    for (let [key, value] of formData.entries()) {
      if (key === 'safetyFeatures') {
        if (!data[key]) data[key] = [];
        data[key].push(value);
      } else {
        data[key] = value;
      }
    }

    // Get required fields for rate calculation
    const homeValue = parseInt(data.homeValue) || parseInt(data.homeSize || 0) * 150; // Fallback based on size
    const yearBuilt = parseInt(data.yearBuilt) || new Date().getFullYear();
    const homeAge = new Date().getFullYear() - yearBuilt;
    const zipCode = data.zipCode || '';
    
    // Map to our rate system parameters
    let ageCategory = 'medium';
    if (homeAge < 10) ageCategory = 'new';
    else if (homeAge > 30) ageCategory = 'old';
    
    // Map safety features to security level
    let securityLevel = 'none';
    if (data.safetyFeatures) {
      if (data.safetyFeatures.includes('security_system') && data.safetyFeatures.includes('smoke_detectors')) {
        securityLevel = 'advanced';
      } else if (data.safetyFeatures.includes('sprinkler_system')) {
        securityLevel = 'premium';
      } else if (data.safetyFeatures.includes('smoke_detectors')) {
        securityLevel = 'basic';
      }
    }
    
    // Default deductible
    const deductible = 1000;

    // Basic calculations for coverage display
    const homeSize = parseInt(data.homeSize) || 0;
    let baseCostPerSqFt = 150; // National average
    
    const state = getStateFromZip(zipCode);
    const regionalMultiplier = regionalMultipliers[state] || regionalMultipliers.default;
    baseCostPerSqFt *= regionalMultiplier;

    if (data.constructionType && constructionTypes[data.constructionType]) {
      baseCostPerSqFt *= constructionTypes[data.constructionType].multiplier;
    }

    if (data.roofType && roofTypes[data.roofType]) {
      baseCostPerSqFt *= roofTypes[data.roofType].multiplier;
    }

    let dwellingCost = homeSize * baseCostPerSqFt;

    const garageSize = parseInt(data.garageSize) || 0;
    dwellingCost += garageSize * 15000;

    if (data.basement === 'finished') {
      dwellingCost += homeSize * 0.3 * 50;
    } else if (data.basement === 'unfinished') {
      dwellingCost += homeSize * 0.3 * 25;
    }

    const stories = parseFloat(data.stories) || 1;
    if (stories > 1.5) {
      dwellingCost *= 1.02;
    }

    const fireplaces = parseInt(data.fireplaces) || 0;
    dwellingCost += fireplaces * 5000;

    const dwellingCoverage = Math.round(dwellingCost);
    const otherStructures = Math.round(dwellingCoverage * 0.1);
    let personalPropertyCoverage = parseInt(data.personalProperty) || Math.round(dwellingCoverage * 0.5);
    const liabilityCoverage = Math.max(300000, Math.round(dwellingCoverage * 0.5));

    // Use the calculated or provided home value for insurance rates
    const finalHomeValue = homeValue > 0 ? homeValue : dwellingCoverage;

    // Get live insurance rates
    if (window.ClientRateFetcher && zipCode && state) {
      window.ClientRateFetcher.getHomeRates(state, zipCode, {
        homeValue: finalHomeValue,
        homeAge: ageCategory,
        security: securityLevel,
        claims: 'none', // Default assumption
        deductible: deductible
      }).then(rates => {
        // Update coverage display
        document.getElementById('dwelling-coverage').textContent = `$${dwellingCoverage.toLocaleString()}`;
        document.getElementById('other-structures').textContent = `$${otherStructures.toLocaleString()}`;
        document.getElementById('personal-property-coverage').textContent = `$${personalPropertyCoverage.toLocaleString()}`;
        document.getElementById('liability-coverage').textContent = `$${liabilityCoverage.toLocaleString()}`;
        document.getElementById('replacement-cost').textContent = `$${dwellingCoverage.toLocaleString()}`;
        
        // Display live premium rates
        document.getElementById('annual-premium').innerHTML = `
          <div class="space-y-2">
            <div class="text-lg font-bold text-blue-600">Basic: $${rates.basic * 12}/year</div>
            <div class="text-lg font-bold text-green-600">Comprehensive: $${rates.comprehensive * 12}/year</div>
            <div class="text-lg font-bold text-purple-600">Premium: $${rates.premium * 12}/year</div>
            <div class="text-sm text-gray-600 mt-2">Monthly rates: $${rates.basic}, $${rates.comprehensive}, $${rates.premium}</div>
          </div>
        `;
        
        results.classList.remove('hidden');
        results.scrollIntoView({ behavior: 'smooth' });
      }).catch(error => {
        console.error('Live rate calculation failed:', error);
        // Fall back to old calculation method
        fallbackCalculation();
      });
    } else {
      // Fall back to old calculation if rate fetcher not available
      fallbackCalculation();
    }
    
    function fallbackCalculation() {
      // Safety feature discounts
      let totalDiscount = 0;
      const appliedDiscounts = [];
      
      if (data.safetyFeatures) {
        data.safetyFeatures.forEach(feature => {
          if (safetyFeatures[feature]) {
            totalDiscount += safetyFeatures[feature].discount;
            appliedDiscounts.push(safetyFeatures[feature].label);
          }
        });
      }

      // Premium calculation (simplified)
      let basePremium = dwellingCoverage * 0.005;
      basePremium *= regionalMultiplier;
      
      if (homeAge > 30) {
        basePremium *= 1.2;
      } else if (homeAge < 10) {
        basePremium *= 0.9;
      }

      const discountedPremium = Math.round(basePremium * (1 - totalDiscount));

      // Update display
      document.getElementById('dwelling-coverage').textContent = `$${dwellingCoverage.toLocaleString()}`;
      document.getElementById('other-structures').textContent = `$${otherStructures.toLocaleString()}`;
      document.getElementById('personal-property-coverage').textContent = `$${personalPropertyCoverage.toLocaleString()}`;
      document.getElementById('liability-coverage').textContent = `$${liabilityCoverage.toLocaleString()}`;
      document.getElementById('replacement-cost').textContent = `$${dwellingCoverage.toLocaleString()}`;
      document.getElementById('annual-premium').textContent = `$${discountedPremium.toLocaleString()}`;

      // Safety discounts
      if (totalDiscount > 0) {
        document.getElementById('safety-discounts').classList.remove('hidden');
        document.getElementById('total-discount').textContent = `${(totalDiscount * 100).toFixed(1)}%`;
        document.getElementById('discount-details').textContent = `Applied: ${appliedDiscounts.join(', ')}`;
      }

      results.classList.remove('hidden');
      results.scrollIntoView({ behavior: 'smooth' });
    }

    // Generate recommendations regardless of rate method
    const recommendations = generateRecommendations(data, dwellingCoverage, homeAge, 0);
    const recommendationsList = document.getElementById('recommendations');
    recommendationsList.innerHTML = recommendations.map(rec => 
      `<li class="flex items-start">
        <span class="text-green-500 mr-2 mt-0.5">•</span>
        <span>${rec}</span>
      </li>`
    ).join('');
  }

  function getStateFromZip(zip) {
    // Simplified zip to state mapping - in production, use a proper service
    const firstDigit = parseInt(zip.charAt(0));
    const zipRanges = {
      0: 'MA', 1: 'NY', 2: 'DC', 3: 'FL', 4: 'GA', 
      5: 'TX', 6: 'CO', 7: 'TX', 8: 'CO', 9: 'CA'
    };
    return zipRanges[firstDigit] || 'default';
  }

  function generateRecommendations(data, dwellingCoverage, homeAge, discount) {
    const recommendations = [];
    
    // Coverage recommendations
    if (data.homeValue && parseInt(data.homeValue) > dwellingCoverage * 1.2) {
      recommendations.push('Consider increasing dwelling coverage - your market value suggests higher replacement cost may be needed');
    }
    
    if (!data.personalProperty || parseInt(data.personalProperty) < dwellingCoverage * 0.4) {
      recommendations.push('Consider conducting a home inventory to ensure adequate personal property coverage');
    }
    
    if (data.highValueItems) {
      recommendations.push('Schedule high-value items separately with additional coverage for jewelry, art, and collectibles');
    }

    // Safety recommendations
    if (discount < 0.1) {
      recommendations.push('Install additional safety features like burglar alarms or security systems to qualify for discounts');
    }
    
    if (!data.safetyFeatures || !data.safetyFeatures.includes('sprinkler_system')) {
      recommendations.push('Consider installing a sprinkler system for significant premium savings (up to 15% discount)');
    }

    // Age-based recommendations
    if (homeAge > 25) {
      recommendations.push('Consider updating electrical, plumbing, and HVAC systems to reduce risk and potentially lower premiums');
    }
    
    if (homeAge > 20 && data.roofType === 'asphalt') {
      recommendations.push('Consider upgrading to impact-resistant or metal roofing for better protection and discounts');
    }

    // General recommendations
    recommendations.push('Get quotes from multiple insurers - rates can vary by 50% or more for identical coverage');
    recommendations.push('Consider raising your deductible to $1,000 or $2,500 to significantly lower premiums');
    recommendations.push('Bundle with auto insurance for potential multi-policy discounts of 5-25%');
    
    if (parseInt(data.liability || 0) < 500000) {
      recommendations.push('Consider umbrella liability insurance for additional protection beyond homeowners limits');
    }

    return recommendations;
  }
});
</script>

<style>
  input:focus, select:focus {
    box-shadow: 0 0 0 2px theme('colors.blue.500/20');
  }
  
  .checkbox-custom:checked {
    background-color: theme('colors.blue.600');
    border-color: theme('colors.blue.600');
  }
</style>