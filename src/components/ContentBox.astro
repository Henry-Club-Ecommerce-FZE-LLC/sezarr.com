---
interface Props {
  type?: 'info' | 'warning' | 'tip' | 'important' | 'note' | 'example';
  title?: string;
  className?: string;
  expandable?: boolean;
  defaultExpanded?: boolean;
}

const { 
  type = 'info', 
  title, 
  className = '', 
  expandable = false, 
  defaultExpanded = true 
} = Astro.props;

const boxStyles = {
  info: {
    bg: 'bg-blue-50 dark:bg-blue-900/20',
    border: 'border-blue-200 dark:border-blue-700',
    icon: 'üí°',
    iconBg: 'bg-blue-100 dark:bg-blue-800',
    iconColor: 'text-blue-600 dark:text-blue-400',
    titleColor: 'text-blue-800 dark:text-blue-200',
    defaultTitle: 'Information'
  },
  warning: {
    bg: 'bg-yellow-50 dark:bg-yellow-900/20',
    border: 'border-yellow-200 dark:border-yellow-700',
    icon: '‚ö†Ô∏è',
    iconBg: 'bg-yellow-100 dark:bg-yellow-800',
    iconColor: 'text-yellow-600 dark:text-yellow-400',
    titleColor: 'text-yellow-800 dark:text-yellow-200',
    defaultTitle: 'Warning'
  },
  tip: {
    bg: 'bg-green-50 dark:bg-green-900/20',
    border: 'border-green-200 dark:border-green-700',
    icon: 'üí°',
    iconBg: 'bg-green-100 dark:bg-green-800',
    iconColor: 'text-green-600 dark:text-green-400',
    titleColor: 'text-green-800 dark:text-green-200',
    defaultTitle: 'Pro Tip'
  },
  important: {
    bg: 'bg-red-50 dark:bg-red-900/20',
    border: 'border-red-200 dark:border-red-700',
    icon: 'üö®',
    iconBg: 'bg-red-100 dark:bg-red-800',
    iconColor: 'text-red-600 dark:text-red-400',
    titleColor: 'text-red-800 dark:text-red-200',
    defaultTitle: 'Important'
  },
  note: {
    bg: 'bg-purple-50 dark:bg-purple-900/20',
    border: 'border-purple-200 dark:border-purple-700',
    icon: 'üìù',
    iconBg: 'bg-purple-100 dark:bg-purple-800',
    iconColor: 'text-purple-600 dark:text-purple-400',
    titleColor: 'text-purple-800 dark:text-purple-200',
    defaultTitle: 'Note'
  },
  example: {
    bg: 'bg-gray-50 dark:bg-gray-800/50',
    border: 'border-gray-200 dark:border-gray-700',
    icon: 'üìã',
    iconBg: 'bg-gray-100 dark:bg-gray-700',
    iconColor: 'text-gray-600 dark:text-gray-400',
    titleColor: 'text-gray-800 dark:text-gray-200',
    defaultTitle: 'Example'
  }
};

const style = boxStyles[type];
const displayTitle = title || style.defaultTitle;
const uniqueId = `content-box-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`rounded-lg border p-4 ${style.bg} ${style.border} ${className}`} role="complementary">
  <!-- Header -->
  <div class="flex items-start gap-3">
    <!-- Icon -->
    <div class={`flex-shrink-0 w-8 h-8 rounded-full ${style.iconBg} flex items-center justify-center`}>
      <span class="text-lg" role="img" aria-label={type}>
        {style.icon}
      </span>
    </div>

    <!-- Title and Toggle -->
    <div class="flex-1">
      {expandable ? (
        <button
          type="button"
          class={`flex items-center justify-between w-full text-left font-semibold ${style.titleColor} hover:opacity-80 transition-opacity`}
          onclick={`toggleContentBox('${uniqueId}')`}
          aria-expanded={defaultExpanded}
          aria-controls={uniqueId}
        >
          <span>{displayTitle}</span>
          <svg 
            class={`w-5 h-5 transition-transform ${!defaultExpanded ? 'rotate-180' : ''}`}
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>
      ) : (
        <h3 class={`font-semibold ${style.titleColor}`}>
          {displayTitle}
        </h3>
      )}
    </div>
  </div>

  <!-- Content -->
  <div 
    id={uniqueId}
    class={`mt-3 text-gray-700 dark:text-gray-300 prose prose-sm max-w-none dark:prose-invert ${expandable && !defaultExpanded ? 'hidden' : ''}`}
  >
    <slot />
  </div>
</div>

<script>
  function toggleContentBox(id) {
    const content = document.getElementById(id);
    const button = content.previousElementSibling.querySelector('button');
    const icon = button?.querySelector('svg');
    
    if (content.classList.contains('hidden')) {
      content.classList.remove('hidden');
      button?.setAttribute('aria-expanded', 'true');
      if (icon) icon.style.transform = 'rotate(0deg)';
    } else {
      content.classList.add('hidden');
      button?.setAttribute('aria-expanded', 'false');
      if (icon) icon.style.transform = 'rotate(180deg)';
    }
  }

  // Make function globally available
  window.toggleContentBox = toggleContentBox;
</script>

<style>
  /* Ensure proper prose styling within boxes */
  .prose h4 {
    margin-top: 1rem;
    margin-bottom: 0.5rem;
  }
  
  .prose p:last-child {
    margin-bottom: 0;
  }
  
  .prose ul:last-child,
  .prose ol:last-child {
    margin-bottom: 0;
  }
</style>