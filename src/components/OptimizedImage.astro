---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
  class?: string;
  sizes?: string;
  quality?: number;
  isLCP?: boolean;
}

const { 
  src, 
  alt, 
  width = 800, 
  height = 600, 
  loading = 'lazy', 
  fetchpriority = 'auto',
  class: className = '',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  quality = 80,
  isLCP = false
} = Astro.props;

// Generate WebP and AVIF versions for better performance
const webpSrc = src.replace(/\.(jpg|jpeg|png)$/i, '.webp');
const avifSrc = src.replace(/\.(jpg|jpeg|png)$/i, '.avif');

// For LCP images, ensure high priority loading
const lcpLoading = isLCP ? 'eager' : loading;
const lcpFetchPriority = isLCP ? 'high' : fetchpriority;

// Apply CSS class for LCP images
const imgClass = `w-full h-auto object-cover ${isLCP ? 'lcp-image' : ''}`;
---

<picture class={className}>
  <!-- AVIF for modern browsers -->
  <source srcset={avifSrc} type="image/avif" {sizes} />
  <!-- WebP for wider browser support -->
  <source srcset={webpSrc} type="image/webp" {sizes} />
  <!-- Fallback to original format -->
  <img 
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={lcpLoading}
    fetchpriority={lcpFetchPriority}
    decoding="async"
    style={`aspect-ratio: ${width}/${height};`}
    class={imgClass}
  />
</picture>

<style>
  /* Special optimizations for LCP images */
  .lcp-image {
    content-visibility: auto;
    contain-intrinsic-size: auto 400px;
    paint-order: paint;
  }
</style>