---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  class?: string;
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  sizes = "(max-width: 480px) 480px, (max-width: 768px) 768px, (max-width: 1200px) 1200px, 1920px",
  loading = 'lazy',
  decoding = 'async',
  class: className = '',
  priority = false,
  ...rest
} = Astro.props;

// Extract base name without extension for optimized images
const baseName = src.replace(/\.[^/.]+$/, '').replace('/images/', '');
const baseUrl = `/images/${baseName}`;

// Generate srcset for different formats and sizes
const generateSrcSet = (format: string) => {
  const sizes = [
    { suffix: '-sm', width: 480 },
    { suffix: '-md', width: 768 },
    { suffix: '-lg', width: 1200 },
    { suffix: '', width: 1920 }
  ];
  
  return sizes
    .map(size => `${baseUrl}${size.suffix}.${format} ${size.width}w`)
    .join(', ');
};

// Use eager loading for priority images
const finalLoading = priority ? 'eager' : loading;
---

<picture class={`responsive-image ${className}`} {...rest}>
  <!-- AVIF format (best compression, modern browsers) -->
  <source
    type="image/avif"
    srcset={generateSrcSet('avif')}
    sizes={sizes}
  />
  
  <!-- WebP format (excellent compression, wide support) -->
  <source
    type="image/webp"  
    srcset={generateSrcSet('webp')}
    sizes={sizes}
  />
  
  <!-- JPEG fallback (universal support) -->
  <source
    type="image/jpeg"
    srcset={generateSrcSet('jpg')}
    sizes={sizes}
  />
  
  <!-- Fallback img element -->
  <img
    src={`${baseUrl}.jpg`}
    alt={alt}
    width={width}
    height={height}
    loading={finalLoading}
    decoding={decoding}
    class="w-full h-auto"
    style={priority ? 'content-visibility: auto;' : ''}
  />
</picture>

<style>
  .responsive-image {
    display: block;
    position: relative;
  }
  
  .responsive-image img {
    transition: opacity 0.3s ease;
  }
  
  /* Improve loading UX */
  .responsive-image img[loading="lazy"]:not([src]) {
    opacity: 0;
  }
  
  .responsive-image img[loading="lazy"][src] {
    opacity: 1;
  }
  
  /* Aspect ratio preservation */
  .responsive-image::before {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #f0f0f0 25%, transparent 25%, transparent 75%, #f0f0f0 75%);
    background-size: 20px 20px;
    opacity: 0.1;
    z-index: -1;
  }
  
  @media (prefers-reduced-motion: reduce) {
    .responsive-image img {
      transition: none;
    }
  }
</style>