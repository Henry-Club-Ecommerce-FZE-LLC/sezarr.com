---
import type { BusinessInsuranceInputs, BusinessInsuranceResults } from '../types/insurance';
---

<div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
  <div class="text-center mb-6">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
      Business Insurance Calculator
    </h2>
    <p class="text-gray-600 dark:text-gray-300">
      Calculate your business insurance needs and estimated costs
    </p>
  </div>

  <form id="business-insurance-calculator" class="space-y-6">
    <!-- Business Information -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Business Information</h3>
      
      <div class="grid md:grid-cols-2 gap-4">
        <div>
          <label for="industry" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Industry
          </label>
          <select id="industry" name="industry" required
                  class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
            <option value="">Select Industry</option>
            <option value="retail">Retail</option>
            <option value="restaurant">Restaurant/Food Service</option>
            <option value="construction">Construction/Contracting</option>
            <option value="professional">Professional Services</option>
            <option value="healthcare">Healthcare</option>
            <option value="manufacturing">Manufacturing</option>
            <option value="technology">Technology</option>
            <option value="real-estate">Real Estate</option>
            <option value="education">Education</option>
            <option value="other">Other</option>
          </select>
        </div>

        <div>
          <label for="business-size" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Business Size
          </label>
          <select id="business-size" name="businessSize" required
                  class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
            <option value="">Select Size</option>
            <option value="sole-proprietor">Sole Proprietor</option>
            <option value="small">Small (1-10 employees)</option>
            <option value="medium">Medium (11-100 employees)</option>
            <option value="large">Large (100+ employees)</option>
          </select>
        </div>
      </div>

      <div class="grid md:grid-cols-2 gap-4">
        <div>
          <label for="annual-revenue" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Annual Revenue
          </label>
          <input type="number" id="annual-revenue" name="annualRevenue" min="0" step="1000" required
                 placeholder="100000"
                 class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
        </div>

        <div>
          <label for="employees" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Number of Employees
          </label>
          <input type="number" id="employees" name="employees" min="0" required
                 placeholder="5"
                 class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
        </div>
      </div>

      <div>
        <label for="property-value" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Property/Equipment Value
        </label>
        <input type="number" id="property-value" name="propertyValue" min="0" step="1000"
               placeholder="50000"
               class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
      </div>
    </div>

    <!-- Coverage Preferences -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Coverage Preferences</h3>
      
      <div>
        <label for="coverage-level" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Coverage Level
        </label>
        <select id="coverage-level" name="coverageLevel" required
                class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
          <option value="basic">Basic Protection</option>
          <option value="standard" selected>Standard Coverage</option>
          <option value="comprehensive">Comprehensive Protection</option>
        </select>
      </div>

      <div>
        <label for="deductible" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Preferred Deductible
        </label>
        <select id="deductible" name="deductible" required
                class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
          <option value="500">$500 (Higher Premium)</option>
          <option value="1000" selected>$1,000 (Balanced)</option>
          <option value="2500">$2,500 (Lower Premium)</option>
          <option value="5000">$5,000 (Lowest Premium)</option>
        </select>
      </div>
    </div>

    <!-- Risk Factors -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Risk Factors</h3>
      
      <div class="grid md:grid-cols-2 gap-4">
        <div class="flex items-center">
          <input type="checkbox" id="public-facing" name="publicFacing"
                 class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600">
          <label for="public-facing" class="ml-2 text-sm text-gray-700 dark:text-gray-300">
            Public-facing business (customers visit)
          </label>
        </div>

        <div class="flex items-center">
          <input type="checkbox" id="handles-data" name="handlesData"
                 class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600">
          <label for="handles-data" class="ml-2 text-sm text-gray-700 dark:text-gray-300">
            Handles sensitive customer data
          </label>
        </div>

        <div class="flex items-center">
          <input type="checkbox" id="professional-services" name="professionalServices"
                 class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600">
          <label for="professional-services" class="ml-2 text-sm text-gray-700 dark:text-gray-300">
            Provides professional services/advice
          </label>
        </div>

        <div class="flex items-center">
          <input type="checkbox" id="owns-vehicles" name="ownsVehicles"
                 class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600">
          <label for="owns-vehicles" class="ml-2 text-sm text-gray-700 dark:text-gray-300">
            Owns/uses business vehicles
          </label>
        </div>
      </div>
    </div>

    <button type="submit" 
            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-md transition-colors">
      Calculate Insurance Needs
    </button>
  </form>

  <!-- Results Section -->
  <div id="business-insurance-results" class="mt-8 hidden">
    <div class="border-t border-gray-200 dark:border-gray-600 pt-6">
      <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Your Business Insurance Plan</h3>
      
      <!-- Total Cost -->
      <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-6">
        <div class="text-center">
          <div class="text-3xl font-bold text-blue-600 dark:text-blue-400" id="total-cost">$0</div>
          <div class="text-sm text-gray-600 dark:text-gray-300">Estimated Annual Premium</div>
        </div>
      </div>

      <!-- Recommended Coverage -->
      <div class="space-y-4">
        <h4 class="font-semibold text-gray-900 dark:text-white">Recommended Coverage:</h4>
        <div id="coverage-breakdown" class="space-y-2">
          <!-- Coverage items will be populated here -->
        </div>
      </div>

      <!-- Coverage Limits -->
      <div class="mt-6 space-y-4">
        <h4 class="font-semibold text-gray-900 dark:text-white">Suggested Coverage Limits:</h4>
        <div id="coverage-limits" class="space-y-2">
          <!-- Coverage limits will be populated here -->
        </div>
      </div>

      <!-- Risk Analysis -->
      <div class="mt-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
        <h4 class="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">Risk Analysis:</h4>
        <div id="risk-analysis" class="text-sm text-yellow-700 dark:text-yellow-300">
          <!-- Risk analysis will be populated here -->
        </div>
      </div>

      <!-- Next Steps -->
      <div class="mt-6 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
        <h4 class="font-semibold text-green-800 dark:text-green-200 mb-2">Next Steps:</h4>
        <ul class="text-sm text-green-700 dark:text-green-300 space-y-1">
          <li>• Get quotes from at least 3 licensed insurance agents</li>
          <li>• Review policy terms and exclusions carefully</li>
          <li>• Consider bundling policies for potential discounts</li>
          <li>• Schedule annual coverage reviews as your business grows</li>
        </ul>
      </div>

      <!-- Disclaimer -->
      <div class="mt-6 p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
        <p class="text-xs text-gray-500 dark:text-gray-400">
          <strong>Disclaimer:</strong> This calculator provides estimates only and should not be considered professional advice. 
          Actual insurance needs and costs may vary. Consult with licensed insurance professionals for personalized recommendations.
        </p>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('business-insurance-calculator') as HTMLFormElement;
  const resultsDiv = document.getElementById('business-insurance-results') as HTMLElement;

  form?.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(form);
    const inputs = {
      industry: formData.get('industry') as string,
      businessSize: formData.get('businessSize') as string,
      annualRevenue: parseInt(formData.get('annualRevenue') as string) || 0,
      employees: parseInt(formData.get('employees') as string) || 0,
      propertyValue: parseInt(formData.get('propertyValue') as string) || 0,
      coverageLevel: formData.get('coverageLevel') as string,
      deductible: parseInt(formData.get('deductible') as string) || 1000,
      publicFacing: formData.has('publicFacing'),
      handlesData: formData.has('handlesData'),
      professionalServices: formData.has('professionalServices'),
      ownsVehicles: formData.has('ownsVehicles')
    };

    const results = calculateBusinessInsurance(inputs);
    displayResults(results);
    
    resultsDiv.classList.remove('hidden');
    resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
  });

  function calculateBusinessInsurance(inputs: any) {
    let totalCost = 0;
    const coverageItems = [];
    const coverageLimits = [];
    let riskLevel = 'Low';

    // Base rates by industry (annual cost per $100k revenue)
    const industryRates = {
      'retail': 1.2,
      'restaurant': 2.8,
      'construction': 3.5,
      'professional': 1.8,
      'healthcare': 4.2,
      'manufacturing': 2.2,
      'technology': 1.5,
      'real-estate': 2.1,
      'education': 1.3,
      'other': 2.0
    };

    const baseRate = industryRates[inputs.industry] || 2.0;
    const revenueMultiplier = inputs.annualRevenue / 100000;

    // General Liability (always recommended)
    let glCost = baseRate * revenueMultiplier * 400;
    if (inputs.publicFacing) glCost *= 1.5;
    
    coverageItems.push({
      name: 'General Liability Insurance',
      cost: Math.round(glCost),
      description: 'Protection against third-party injury and property damage claims'
    });
    
    coverageLimits.push({
      type: 'General Liability',
      limit: `$${Math.max(1000000, inputs.annualRevenue * 2).toLocaleString()} per occurrence`
    });

    totalCost += glCost;

    // Professional Liability
    if (inputs.professionalServices || inputs.industry === 'professional' || inputs.industry === 'healthcare') {
      const plCost = Math.round(baseRate * revenueMultiplier * 600);
      coverageItems.push({
        name: 'Professional Liability Insurance',
        cost: plCost,
        description: 'Coverage for professional errors and omissions'
      });
      
      coverageLimits.push({
        type: 'Professional Liability',
        limit: `$${Math.max(1000000, inputs.annualRevenue).toLocaleString()} per claim`
      });

      totalCost += plCost;
      riskLevel = 'Medium';
    }

    // Property Insurance
    if (inputs.propertyValue > 0) {
      const propertyCost = Math.round(inputs.propertyValue * 0.008); // ~0.8% of property value
      coverageItems.push({
        name: 'Commercial Property Insurance',
        cost: propertyCost,
        description: 'Coverage for business property, equipment, and inventory'
      });
      
      coverageLimits.push({
        type: 'Property Insurance',
        limit: `$${inputs.propertyValue.toLocaleString()} replacement cost`
      });

      totalCost += propertyCost;
    }

    // Workers' Compensation
    if (inputs.employees > 0) {
      const payrollEstimate = inputs.employees * 50000; // Assume $50k average salary
      const wcRate = industryRates[inputs.industry] || 2.0;
      const wcCost = Math.round(payrollEstimate * (wcRate / 100));
      
      coverageItems.push({
        name: "Workers' Compensation Insurance",
        cost: wcCost,
        description: 'Required coverage for employee workplace injuries'
      });
      
      coverageLimits.push({
        type: "Workers' Compensation",
        limit: 'State-required minimums plus employer liability'
      });

      totalCost += wcCost;
    }

    // Cyber Liability
    if (inputs.handlesData || inputs.industry === 'technology' || inputs.industry === 'healthcare') {
      const cyberCost = Math.round(Math.max(800, revenueMultiplier * 500));
      coverageItems.push({
        name: 'Cyber Liability Insurance',
        cost: cyberCost,
        description: 'Protection against data breaches and cyber attacks'
      });
      
      coverageLimits.push({
        type: 'Cyber Liability',
        limit: '$1,000,000 per incident with breach response'
      });

      totalCost += cyberCost;
      riskLevel = 'High';
    }

    // Commercial Auto
    if (inputs.ownsVehicles) {
      const autoCost = 1800; // Average per vehicle
      coverageItems.push({
        name: 'Commercial Auto Insurance',
        cost: autoCost,
        description: 'Coverage for business-owned or used vehicles'
      });
      
      coverageLimits.push({
        type: 'Commercial Auto',
        limit: '$1,000,000 combined single limit'
      });

      totalCost += autoCost;
    }

    // Coverage level adjustment
    const levelMultipliers = {
      'basic': 0.8,
      'standard': 1.0,
      'comprehensive': 1.3
    };

    totalCost *= levelMultipliers[inputs.coverageLevel] || 1.0;

    // Deductible adjustment
    const deductibleAdjustments = {
      500: 1.15,
      1000: 1.0,
      2500: 0.88,
      5000: 0.75
    };

    totalCost *= deductibleAdjustments[inputs.deductible] || 1.0;

    return {
      totalCost: Math.round(totalCost),
      coverageItems,
      coverageLimits,
      riskLevel,
      inputs
    };
  }

  function displayResults(results: any) {
    // Display total cost
    const totalCostElement = document.getElementById('total-cost');
    if (totalCostElement) {
      totalCostElement.textContent = `$${results.totalCost.toLocaleString()}`;
    }

    // Display coverage breakdown
    const coverageBreakdownElement = document.getElementById('coverage-breakdown');
    if (coverageBreakdownElement) {
      coverageBreakdownElement.innerHTML = results.coverageItems.map((item: any) => `
        <div class="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded">
          <div>
            <div class="font-medium text-gray-900 dark:text-white">${item.name}</div>
            <div class="text-sm text-gray-600 dark:text-gray-300">${item.description}</div>
          </div>
          <div class="font-semibold text-blue-600 dark:text-blue-400">
            $${item.cost.toLocaleString()}
          </div>
        </div>
      `).join('');
    }

    // Display coverage limits
    const coverageLimitsElement = document.getElementById('coverage-limits');
    if (coverageLimitsElement) {
      coverageLimitsElement.innerHTML = results.coverageLimits.map((limit: any) => `
        <div class="flex justify-between text-sm">
          <span class="text-gray-600 dark:text-gray-300">${limit.type}:</span>
          <span class="font-medium text-gray-900 dark:text-white">${limit.limit}</span>
        </div>
      `).join('');
    }

    // Display risk analysis
    const riskAnalysisElement = document.getElementById('risk-analysis');
    if (riskAnalysisElement) {
      const riskMessages = {
        'Low': 'Your business has relatively low risk exposure. Basic coverage should provide adequate protection.',
        'Medium': 'Your business has moderate risk factors. Standard coverage with professional liability is recommended.',
        'High': 'Your business has elevated risk exposure. Comprehensive coverage including cyber liability is strongly recommended.'
      };
      
      riskAnalysisElement.textContent = riskMessages[results.riskLevel] || riskMessages['Medium'];
    }
  }
});
</script>