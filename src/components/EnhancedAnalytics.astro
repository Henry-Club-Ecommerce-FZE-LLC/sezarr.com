---
// Enhanced Analytics Component for Insurance Website
// Safe integration with existing Astro setup
import { SITE } from '../config/site.ts';
---

<!-- Google AdSense (deferred) -->
<script src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1189140861538062"
  crossorigin="anonymous" defer></script>

<!-- Google tag (gtag.js, deferred) -->
<script src={`https://www.googletagmanager.com/gtag/js?id=${SITE.GA4_ID}`}
     defer></script>
<script is:inline define:vars={{ GA4_ID: SITE.GA4_ID }}>
  window.dataLayer = window.dataLayer || [];
  window.gtag = function(){dataLayer.push(arguments);}
  window.gtag('js', new Date());
  window.gtag('config', GA4_ID);

  // Helper functions for insurance tracking
  window.getInsuranceTypeFromPath = function() {
    const path = window.location.pathname.toLowerCase();
    if (path.includes('auto')) return 'auto_insurance';
    if (path.includes('health')) return 'health_insurance';
    if (path.includes('life')) return 'life_insurance';
    if (path.includes('homeowners') || path.includes('home')) return 'homeowners_insurance';
    if (path.includes('business')) return 'business_insurance';
    if (path.includes('disability')) return 'disability_insurance';
    if (path.includes('travel')) return 'travel_insurance';
    if (path.includes('pet')) return 'pet_insurance';
    return 'general_insurance';
  }

  window.getContentCategoryFromPath = function() {
    const path = window.location.pathname;
    if (path.includes('/posts/')) return 'article';
    if (path.includes('/tools/')) return 'calculator';
    if (path.includes('/guides/')) return 'guide';
    if (path.includes('/reviews/')) return 'review';
    return 'page';
  }
</script>

<!-- Enhanced Calculator Event Tracking -->
<script is:inline define:vars={{ GA4_ID: SITE.GA4_ID }}>
  // Track calculator usage
  function trackCalculatorEvent(calculatorType, eventAction, eventData = {}) {
    if (typeof window.gtag !== 'undefined') {
      window.gtag('event', eventAction, {
        event_category: 'calculator',
        calculator_type: calculatorType,
        ...eventData
      });
    }
  }

  // Track form submissions
  function trackCalculatorSubmission(calculatorType, formData = {}) {
    trackCalculatorEvent(calculatorType, 'calculator_submission', {
      engagement_time_msec: Date.now() - window.pageLoadTime,
      ...formData
    });
  }

  // Track quote generation
  function trackQuoteGeneration(calculatorType, quoteData = {}) {
    trackCalculatorEvent(calculatorType, 'quote_generated', {
      quote_value: quoteData.annual || 0,
      coverage_type: quoteData.coverage || 'unknown',
      ...quoteData
    });
  }

  // Track blog/post engagement
  function trackPostEngagement(postType, action, data = {}) {
    if (typeof window.gtag !== 'undefined') {
      window.gtag('event', action, {
        event_category: 'content',
        content_type: postType,
        ...data
      });
    }
  }

  // Track scroll depth
  function trackScrollDepth() {
    let maxScroll = 0;
    window.addEventListener('scroll', () => {
      const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
      if (scrollPercent > maxScroll && scrollPercent % 25 === 0 && scrollPercent <= 100) {
        maxScroll = scrollPercent;
        if (typeof window.gtag !== 'undefined') {
          window.gtag('event', 'scroll', {
            event_category: 'engagement',
            custom_parameter_1: 'scroll_depth',
            value: scrollPercent
          });
        }
      }
    });
  }

  // Track time on page
  function trackTimeOnPage() {
    let startTime = Date.now();
    let timeInterval;
    
    function sendTimeUpdate() {
      const timeSpent = Math.round((Date.now() - startTime) / 1000);
      if (typeof window.gtag !== 'undefined' && timeSpent > 0) {
        window.gtag('event', 'page_engagement', {
          event_category: 'engagement',
          custom_parameter_1: 'time_on_page',
          value: timeSpent
        });
      }
    }
    
    // Send time updates every 30 seconds
    timeInterval = setInterval(sendTimeUpdate, 30000);
    
    // Send final time on page unload
    window.addEventListener('beforeunload', () => {
      clearInterval(timeInterval);
      sendTimeUpdate();
    });
  }

  // Track calculator field interactions
  function trackFieldInteraction(calculatorType, fieldName, fieldValue = '') {
    if (typeof window.gtag !== 'undefined') {
      window.gtag('event', 'form_field_interaction', {
        event_category: 'calculator_interaction',
        calculator_type: calculatorType,
        field_name: fieldName,
        field_value: fieldValue.toString().substring(0, 50) // Limit length for privacy
      });
    }
  }

  // Track CTA clicks
  function trackCTAClick(ctaLocation, ctaText, destination = '') {
    if (typeof window.gtag !== 'undefined') {
      window.gtag('event', 'cta_click', {
        event_category: 'conversion',
        cta_location: ctaLocation,
        cta_text: ctaText.substring(0, 100),
        destination: destination
      });
    }
  }

  // Auto-track common interactions
  function initializeAutoTracking() {
    // Track all external links
    document.querySelectorAll('a[href^="http"]').forEach(link => {
      if (!link.href.includes(window.location.hostname)) {
        link.addEventListener('click', () => {
          trackCTAClick('external_link', link.textContent, link.href);
        });
      }
    });

    // Track button clicks
    document.querySelectorAll('button, .btn, [role="button"]').forEach(button => {
      button.addEventListener('click', () => {
        const buttonText = button.textContent || button.getAttribute('aria-label') || 'Unknown Button';
        const context = button.closest('[data-section]')?.dataset.section || 'unknown';
        trackCTAClick(context, buttonText);
      });
    });

    // Track calculator form field interactions
    const calculatorForms = document.querySelectorAll('[id*="Calculator"], [class*="calculator"]');
    calculatorForms.forEach(form => {
      const calculatorType = form.id.replace('Calculator', '').toLowerCase() || 'unknown';
      
      form.querySelectorAll('input, select, textarea').forEach(field => {
        field.addEventListener('change', () => {
          trackFieldInteraction(calculatorType, field.name || field.id, field.value);
        });
        
        field.addEventListener('focus', () => {
          if (typeof window.gtag !== 'undefined') {
            window.gtag('event', 'form_field_focus', {
              event_category: 'calculator_interaction',
              calculator_type: calculatorType,
              field_name: field.name || field.id
            });
          }
        });
      });
    });

    // Initialize engagement tracking
    trackScrollDepth();
    trackTimeOnPage();
    trackMobileInteractions();
  }

  // Track mobile-specific interactions
  function trackMobileInteractions() {
    // Detect if user is on mobile
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    if (isMobile) {
      // Track device type
      window.gtag('event', 'device_detection', {
        event_category: 'user_experience',
        device_type: 'mobile',
        user_agent: navigator.userAgent.substring(0, 100)
      });

      // Track touch interactions
      document.addEventListener('touchstart', function() {
        window.gtag('event', 'touch_interaction', {
          event_category: 'mobile_engagement',
          interaction_type: 'touch_start'
        });
      }, { once: true });

      // Track orientation changes
      window.addEventListener('orientationchange', function() {
        setTimeout(() => {
          window.gtag('event', 'orientation_change', {
            event_category: 'mobile_engagement',
            screen_orientation: screen.orientation ? screen.orientation.angle : window.orientation
          });
        }, 100);
      });

      // Track viewport changes (useful for mobile)
      let viewportWidth = window.innerWidth;
      let viewportHeight = window.innerHeight;
      
      window.addEventListener('resize', function() {
        const newWidth = window.innerWidth;
        const newHeight = window.innerHeight;
        
        if (Math.abs(newWidth - viewportWidth) > 50 || Math.abs(newHeight - viewportHeight) > 50) {
          window.gtag('event', 'viewport_change', {
            event_category: 'mobile_engagement',
            viewport_width: newWidth,
            viewport_height: newHeight
          });
          
          viewportWidth = newWidth;
          viewportHeight = newHeight;
        }
      });

      // Track mobile-specific calculator interactions
      document.querySelectorAll('input, select, textarea').forEach(field => {
        field.addEventListener('focus', function() {
          window.gtag('event', 'mobile_field_focus', {
            event_category: 'mobile_calculator',
            field_type: this.type,
            field_name: this.name || this.id
          });
        });
      });
    }

    // Track page visibility (important for mobile apps/browsers)
    document.addEventListener('visibilitychange', function() {
      if (document.hidden) {
        window.gtag('event', 'page_hidden', {
          event_category: 'engagement',
          visibility_state: 'hidden'
        });
      } else {
        window.gtag('event', 'page_visible', {
          event_category: 'engagement',
          visibility_state: 'visible'
        });
      }
    });
  }

  // Make functions globally available
  window.trackCalculatorEvent = trackCalculatorEvent;
  window.trackCalculatorSubmission = trackCalculatorSubmission;
  window.trackQuoteGeneration = trackQuoteGeneration;
  window.trackPostEngagement = trackPostEngagement;
  window.trackFieldInteraction = trackFieldInteraction;
  window.trackCTAClick = trackCTAClick;

  // Mobile Analytics Debugging Helper
  window.checkAnalytics = function() {
    console.log('=== SEZARR.COM ANALYTICS DEBUG ===');
    console.log('GA4 ID:', GA4_ID);
    console.log('DataLayer exists:', !!window.dataLayer);
    console.log('Gtag function exists:', typeof window.gtag !== 'undefined');
    console.log('Is Mobile:', /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
    console.log('Page URL:', window.location.href);
    console.log('Page Title:', document.title);
    console.log('Insurance Type:', window.getInsuranceTypeFromPath());
    console.log('Content Category:', window.getContentCategoryFromPath());
    
    // Test event
    if (typeof window.gtag !== 'undefined') {
      window.gtag('event', 'debug_test', {
        event_category: 'debugging',
        debug_timestamp: new Date().toISOString(),
        debug_user_agent: navigator.userAgent.substring(0, 100)
      });
      console.log('✅ Test event sent successfully');
    } else {
      console.log('❌ Gtag function not available');
    }
  };
  window.pageLoadTime = Date.now();

  // Initialize tracking when page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAutoTracking);
  } else {
    initializeAutoTracking();
  }
</script>

<!-- Remove Facebook Pixel and Hotjar for now - add back when you have real IDs -->
<!-- Facebook Pixel Integration - Replace with your pixel ID
<script is:inline>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  
  fbq('init', 'YOUR_PIXEL_ID');
  fbq('track', 'PageView');
</script>
-->

<style>
  /* Ensure analytics scripts don't affect layout */
  .analytics-container {
    position: absolute;
    left: -9999px;
    opacity: 0;
    pointer-events: none;
  }
</style>
