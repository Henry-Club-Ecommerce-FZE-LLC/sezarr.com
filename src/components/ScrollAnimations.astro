---
// Scroll Animations Component - Add smooth reveal animations throughout the site
---

<script>
  class ScrollAnimations {
    constructor() {
      this.observedElements = new Set();
      this.init();
    }
    
    init() {
      this.setupIntersectionObserver();
      this.setupScrollAnimations();
      this.setupParallaxEffects();
      this.initializeAnimations();
    }
    
    setupIntersectionObserver() {
      const observerOptions = {
        root: null,
        rootMargin: '0px 0px -100px 0px',
        threshold: [0.1, 0.3, 0.5]
      };
      
      this.observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            this.animateElement(entry.target, entry.intersectionRatio);
          }
        });
      }, observerOptions);
    }
    
    setupScrollAnimations() {
      // Reveal animations for different element types
      const revealElements = document.querySelectorAll(`
        .hero-glass,
        .category-card,
        section h2,
        section h3,
        .testimonial-card,
        .stats-card,
        .feature-card,
        .rate-widget,
        .newsletter-section,
        .company-ratings
      `);
      
      revealElements.forEach((element, index) => {
        if (!this.observedElements.has(element)) {
          element.classList.add('scroll-reveal');
          element.style.setProperty('--animation-delay', `${index * 100}ms`);
          this.observer.observe(element);
          this.observedElements.add(element);
        }
      });
    }
    
    setupParallaxEffects() {
      const parallaxElements = document.querySelectorAll('.parallax-element');
      
      if (parallaxElements.length > 0 && !window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        window.addEventListener('scroll', this.throttle(() => {
          const scrollTop = window.pageYOffset;
          
          parallaxElements.forEach(element => {
            const speed = element.dataset.parallaxSpeed || 0.5;
            const yPos = -(scrollTop * speed);
            element.style.transform = `translate3d(0, ${yPos}px, 0)`;
          });
        }, 16));
      }
    }
    
    animateElement(element, ratio) {
      // Different animation types based on element class
      if (element.classList.contains('hero-glass')) {
        element.classList.add('animate-hero-reveal');
      } else if (element.classList.contains('category-card')) {
        element.classList.add('animate-slide-up');
      } else if (element.tagName === 'H2' || element.tagName === 'H3') {
        element.classList.add('animate-fade-in-up');
      } else if (element.classList.contains('stats-card')) {
        element.classList.add('animate-scale-in');
        this.animateCounters(element);
      } else {
        element.classList.add('animate-fade-in');
      }
      
      // Add staggered animation for child elements
      const children = element.querySelectorAll('.stagger-child');
      children.forEach((child, index) => {
        setTimeout(() => {
          child.classList.add('animate-stagger-in');
        }, index * 100);
      });
    }
    
    animateCounters(statsContainer) {
      const counters = statsContainer.querySelectorAll('.counter');
      counters.forEach(counter => {
        if (!counter.classList.contains('counted')) {
          const target = parseInt(counter.getAttribute('data-target')) || parseInt(counter.textContent);
          this.countUp(counter, target);
          counter.classList.add('counted');
        }
      });
    }
    
    countUp(element, target) {
      const increment = target / 100;
      let count = 0;
      
      const updateCount = () => {
        if (count < target) {
          count += increment;
          element.textContent = Math.ceil(count);
          requestAnimationFrame(updateCount);
        } else {
          element.textContent = target;
        }
      };
      
      updateCount();
    }
    
    throttle(func, limit) {
      let inThrottle;
      return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
          func.apply(context, args);
          inThrottle = true;
          setTimeout(() => inThrottle = false, limit);
        }
      };
    }
    
    initializeAnimations() {
      // Add smooth scrolling for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = anchor.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement && !window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
      
      // Add floating animation to background elements
      this.animateFloatingElements();
    }
    
    animateFloatingElements() {
      const floatingElements = document.querySelectorAll('.floating-bg-element');
      floatingElements.forEach((element, index) => {
        element.style.animationDelay = `${index * 0.5}s`;
        element.classList.add('animate-float');
      });
    }
    
    // Public method to refresh animations for new content
    refresh() {
      this.setupScrollAnimations();
    }
    
    // Cleanup method
    destroy() {
      if (this.observer) {
        this.observer.disconnect();
      }
      window.removeEventListener('scroll', this.handleScroll);
    }
  }
  
  // Global scroll animations instance
  let scrollAnimations;
  
  function initScrollAnimations() {
    if (typeof window !== 'undefined' && document.body) {
      scrollAnimations = new ScrollAnimations();
      
      // Make available globally for dynamic content
      window.ScrollAnimations = scrollAnimations;
    }
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initScrollAnimations);
  
  // Re-initialize on view transitions (if using Astro view transitions)
  document.addEventListener('astro:page-load', initScrollAnimations);
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if (scrollAnimations) {
      scrollAnimations.destroy();
    }
  });
</script>

<style>
  /* Base scroll reveal styles */
  .scroll-reveal {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition-delay: var(--animation-delay, 0ms);
  }
  
  /* Animation keyframes */
  @keyframes hero-reveal {
    from {
      opacity: 0;
      transform: translateY(40px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  @keyframes slide-up {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  @keyframes scale-in {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  @keyframes stagger-in {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
    }
    33% {
      transform: translateY(-20px) rotate(1deg);
    }
    66% {
      transform: translateY(10px) rotate(-1deg);
    }
  }
  
  /* Animation classes */
  .animate-hero-reveal {
    animation: hero-reveal 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  }
  
  .animate-slide-up {
    animation: slide-up 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  }
  
  .animate-fade-in-up {
    animation: fade-in-up 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  }
  
  .animate-fade-in {
    animation: fade-in 0.8s ease-out forwards;
  }
  
  .animate-scale-in {
    animation: scale-in 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
  }
  
  .animate-stagger-in {
    animation: stagger-in 0.6s ease-out forwards;
  }
  
  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
  
  /* Parallax elements */
  .parallax-element {
    will-change: transform;
  }
  
  /* Performance optimizations */
  .scroll-reveal,
  .animate-hero-reveal,
  .animate-slide-up,
  .animate-fade-in-up,
  .animate-fade-in,
  .animate-scale-in,
  .animate-stagger-in {
    will-change: opacity, transform;
    backface-visibility: hidden;
  }
  
  /* Accessibility - Respect motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .scroll-reveal {
      opacity: 1;
      transform: none;
      transition: none;
    }
    
    .animate-hero-reveal,
    .animate-slide-up,
    .animate-fade-in-up,
    .animate-fade-in,
    .animate-scale-in,
    .animate-stagger-in,
    .animate-float {
      animation: none;
      opacity: 1;
      transform: none;
    }
    
    .parallax-element {
      transform: none !important;
    }
  }
  
  /* Smooth scrolling for the whole document */
  @media (prefers-reduced-motion: no-preference) {
    html {
      scroll-behavior: smooth;
    }
  }
  
  /* Enhanced focus styles for accessibility */
  .scroll-reveal:focus-visible,
  .category-card:focus-visible,
  .stats-card:focus-visible {
    outline: 2px solid #3B82F6;
    outline-offset: 4px;
    border-radius: 8px;
  }
</style>