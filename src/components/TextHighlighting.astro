---
interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div class={`text-highlight-toolbar ${className}`}>
  <!-- Text selection toolbar (hidden by default) -->
  <div 
    id="text-selection-toolbar" 
    class="fixed z-50 bg-gray-900 text-white rounded-lg shadow-lg px-3 py-2 flex items-center gap-2 transition-all duration-200 pointer-events-none opacity-0"
    style="transform: translateY(-10px);"
  >
    <button
      type="button"
      id="copy-selected-text"
      class="flex items-center gap-1 px-2 py-1 hover:bg-gray-700 rounded text-sm transition-colors pointer-events-auto"
      title="Copy selected text"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
      </svg>
      Copy
    </button>

    <button
      type="button"
      id="highlight-selected-text"
      class="flex items-center gap-1 px-2 py-1 hover:bg-gray-700 rounded text-sm transition-colors pointer-events-auto"
      title="Highlight selected text"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
      </svg>
      Highlight
    </button>

    <button
      type="button"
      id="share-selected-text"
      class="flex items-center gap-1 px-2 py-1 hover:bg-gray-700 rounded text-sm transition-colors pointer-events-auto"
      title="Share selected text"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
      </svg>
      Share
    </button>

    <div class="w-px h-4 bg-gray-600"></div>

    <button
      type="button"
      id="close-toolbar"
      class="flex items-center justify-center w-6 h-6 hover:bg-gray-700 rounded text-sm transition-colors pointer-events-auto"
      title="Close"
    >
      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  </div>

  <!-- Highlights sidebar toggle -->
  <button
    type="button"
    id="highlights-toggle"
    class="fixed right-4 top-1/2 -translate-y-1/2 z-40 bg-blue-600 hover:bg-blue-700 text-white rounded-l-lg px-3 py-4 shadow-lg transition-all duration-300"
    style="display: none;"
    onclick="toggleHighlightsSidebar()"
  >
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
    </svg>
    <div class="text-xs mt-1">Highlights</div>
  </button>

  <!-- Highlights sidebar -->
  <div
    id="highlights-sidebar"
    class="fixed right-0 top-0 h-full w-80 bg-white dark:bg-gray-800 shadow-2xl transform translate-x-full transition-transform duration-300 z-50 border-l border-gray-200 dark:border-gray-700"
  >
    <div class="p-4 border-b border-gray-200 dark:border-gray-700">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Your Highlights</h3>
        <button
          type="button"
          onclick="toggleHighlightsSidebar()"
          class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
    </div>
    
    <div class="p-4">
      <div id="highlights-list" class="space-y-3">
        <!-- Highlights will be populated here -->
      </div>
      
      <div id="no-highlights" class="text-center py-8 text-gray-500 dark:text-gray-400">
        <svg class="w-12 h-12 mx-auto mb-3 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
        </svg>
        <p>No highlights yet</p>
        <p class="text-sm mt-1">Select text to create highlights</p>
      </div>
    </div>
  </div>

  <!-- Overlay for sidebar -->
  <div
    id="highlights-overlay"
    class="fixed inset-0 bg-black bg-opacity-50 z-40 opacity-0 pointer-events-none transition-opacity duration-300"
    onclick="toggleHighlightsSidebar()"
  ></div>
</div>

<script>
  let selectedText = '';
  let selectedRange = null;
  let highlights = [];

  // Initialize text highlighting system
  function initTextHighlighting() {
    loadHighlights();
    applyExistingHighlights();
    setupTextSelectionHandler();
    setupKeyboardShortcuts();
  }

  // Handle text selection
  function setupTextSelectionHandler() {
    document.addEventListener('mouseup', handleTextSelection);
    document.addEventListener('keyup', handleTextSelection);
  }

  function handleTextSelection() {
    const selection = window.getSelection();
    const toolbar = document.getElementById('text-selection-toolbar');
    
    if (selection.toString().trim().length > 0) {
      selectedText = selection.toString().trim();
      selectedRange = selection.getRangeAt(0).cloneRange();
      showSelectionToolbar(selection);
    } else {
      hideSelectionToolbar();
    }
  }

  function showSelectionToolbar(selection) {
    const toolbar = document.getElementById('text-selection-toolbar');
    const rect = selection.getRangeAt(0).getBoundingClientRect();
    
    // Position toolbar above selection
    const toolbarRect = toolbar.getBoundingClientRect();
    const left = Math.max(10, rect.left + (rect.width / 2) - (toolbarRect.width / 2));
    const top = rect.top - toolbarRect.height - 10;
    
    toolbar.style.left = `${left}px`;
    toolbar.style.top = `${window.scrollY + top}px`;
    toolbar.style.opacity = '1';
    toolbar.style.pointerEvents = 'auto';
    toolbar.style.transform = 'translateY(0)';
  }

  function hideSelectionToolbar() {
    const toolbar = document.getElementById('text-selection-toolbar');
    toolbar.style.opacity = '0';
    toolbar.style.pointerEvents = 'none';
    toolbar.style.transform = 'translateY(-10px)';
  }

  // Copy selected text
  document.getElementById('copy-selected-text')?.addEventListener('click', () => {
    if (selectedText) {
      navigator.clipboard.writeText(selectedText).then(() => {
        showToast('Text copied to clipboard!');
        hideSelectionToolbar();
      });
    }
  });

  // Highlight selected text
  document.getElementById('highlight-selected-text')?.addEventListener('click', () => {
    if (selectedRange && selectedText) {
      createHighlight(selectedRange, selectedText);
      hideSelectionToolbar();
      window.getSelection().removeAllRanges();
    }
  });

  // Share selected text
  document.getElementById('share-selected-text')?.addEventListener('click', () => {
    if (selectedText) {
      const url = window.location.href;
      const shareText = `"${selectedText}" - ${document.title} ${url}`;
      
      if (navigator.share) {
        navigator.share({
          title: document.title,
          text: shareText
        });
      } else {
        navigator.clipboard.writeText(shareText).then(() => {
          showToast('Quote copied for sharing!');
        });
      }
      hideSelectionToolbar();
    }
  });

  // Close toolbar
  document.getElementById('close-toolbar')?.addEventListener('click', () => {
    hideSelectionToolbar();
    window.getSelection().removeAllRanges();
  });

  // Create highlight
  function createHighlight(range, text) {
    const highlightId = 'highlight-' + Date.now();
    const span = document.createElement('span');
    span.id = highlightId;
    span.className = 'bg-yellow-200 dark:bg-yellow-800 px-1 rounded cursor-pointer relative';
    span.title = 'Click to remove highlight';
    
    try {
      range.surroundContents(span);
      
      const highlight = {
        id: highlightId,
        text: text,
        timestamp: Date.now(),
        url: window.location.pathname,
        position: getTextPosition(span)
      };
      
      highlights.push(highlight);
      saveHighlights();
      updateHighlightsList();
      showHighlightsToggle();
      
      // Add click handler to remove highlight
      span.addEventListener('click', () => removeHighlight(highlightId));
      
      showToast('Text highlighted!');
    } catch (e) {
      console.error('Could not create highlight:', e);
      showToast('Could not highlight this text');
    }
  }

  // Remove highlight
  function removeHighlight(highlightId) {
    const highlightElement = document.getElementById(highlightId);
    if (highlightElement) {
      const parent = highlightElement.parentNode;
      parent.replaceChild(document.createTextNode(highlightElement.textContent), highlightElement);
      parent.normalize();
    }
    
    highlights = highlights.filter(h => h.id !== highlightId);
    saveHighlights();
    updateHighlightsList();
    
    if (highlights.length === 0) {
      hideHighlightsToggle();
    }
    
    showToast('Highlight removed');
  }

  // Get text position for saving
  function getTextPosition(element) {
    const walker = document.createTreeWalker(
      document.body,
      NodeFilter.SHOW_TEXT,
      null,
      false
    );
    
    let position = 0;
    let node;
    
    while (node = walker.nextNode()) {
      if (element.contains(node)) {
        return position;
      }
      position += node.textContent.length;
    }
    
    return position;
  }

  // Save highlights to localStorage
  function saveHighlights() {
    const articleUrl = window.location.pathname;
    const allHighlights = JSON.parse(localStorage.getItem('textHighlights') || '{}');
    allHighlights[articleUrl] = highlights;
    localStorage.setItem('textHighlights', JSON.stringify(allHighlights));
  }

  // Load highlights from localStorage
  function loadHighlights() {
    const articleUrl = window.location.pathname;
    const allHighlights = JSON.parse(localStorage.getItem('textHighlights') || '{}');
    highlights = allHighlights[articleUrl] || [];
  }

  // Apply existing highlights
  function applyExistingHighlights() {
    if (highlights.length > 0) {
      showHighlightsToggle();
      updateHighlightsList();
    }
    
    // Note: Restoring highlights from position is complex and might not work perfectly
    // after page structure changes. For production, you'd want a more robust system.
  }

  // Toggle highlights sidebar
  function toggleHighlightsSidebar() {
    const sidebar = document.getElementById('highlights-sidebar');
    const overlay = document.getElementById('highlights-overlay');
    const isOpen = !sidebar.classList.contains('translate-x-full');
    
    if (isOpen) {
      sidebar.classList.add('translate-x-full');
      overlay.classList.add('opacity-0', 'pointer-events-none');
    } else {
      sidebar.classList.remove('translate-x-full');
      overlay.classList.remove('opacity-0', 'pointer-events-none');
    }
  }

  // Update highlights list in sidebar
  function updateHighlightsList() {
    const list = document.getElementById('highlights-list');
    const noHighlights = document.getElementById('no-highlights');
    
    if (highlights.length === 0) {
      list.innerHTML = '';
      noHighlights.style.display = 'block';
      return;
    }
    
    noHighlights.style.display = 'none';
    
    list.innerHTML = highlights.map((highlight, index) => `
      <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 group">
        <div class="flex items-start justify-between mb-2">
          <span class="text-xs text-gray-500 dark:text-gray-400">
            Highlight ${index + 1}
          </span>
          <button
            onclick="removeHighlight('${highlight.id}')"
            class="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 transition-all"
            title="Remove highlight"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
          </button>
        </div>
        <p class="text-sm text-gray-800 dark:text-gray-200 leading-relaxed">
          "${highlight.text.length > 150 ? highlight.text.substring(0, 150) + '...' : highlight.text}"
        </p>
        <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
          ${new Date(highlight.timestamp).toLocaleDateString()}
        </div>
      </div>
    `).join('');
  }

  // Show/hide highlights toggle button
  function showHighlightsToggle() {
    document.getElementById('highlights-toggle').style.display = 'block';
  }

  function hideHighlightsToggle() {
    document.getElementById('highlights-toggle').style.display = 'none';
  }

  // Setup keyboard shortcuts
  function setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case 'h':
            e.preventDefault();
            if (selectedRange && selectedText) {
              createHighlight(selectedRange, selectedText);
              hideSelectionToolbar();
              window.getSelection().removeAllRanges();
            }
            break;
          case 'k':
            e.preventDefault();
            toggleHighlightsSidebar();
            break;
        }
      }
      
      if (e.key === 'Escape') {
        hideSelectionToolbar();
        if (!document.getElementById('highlights-sidebar').classList.contains('translate-x-full')) {
          toggleHighlightsSidebar();
        }
      }
    });
  }

  // Show toast notification
  function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-gray-900 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-all duration-300';
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      toast.style.transform = 'translateY(-10px)';
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 2000);
  }

  // Make functions globally available
  window.toggleHighlightsSidebar = toggleHighlightsSidebar;
  window.removeHighlight = removeHighlight;

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTextHighlighting);
  } else {
    initTextHighlighting();
  }
</script>

<style>
  /* Prevent text selection on toolbar */
  #text-selection-toolbar {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  
  /* Smooth highlight hover effects */
  [id^="highlight-"]:hover {
    @apply bg-yellow-300 dark:bg-yellow-700;
  }
  
  /* Sidebar scrollbar styling */
  #highlights-sidebar {
    scrollbar-width: thin;
    scrollbar-color: #d1d5db #f9fafb;
  }
  
  #highlights-sidebar::-webkit-scrollbar {
    width: 6px;
  }
  
  #highlights-sidebar::-webkit-scrollbar-track {
    background: #f9fafb;
  }
  
  #highlights-sidebar::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 3px;
  }
  
  #highlights-sidebar::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }
</style>